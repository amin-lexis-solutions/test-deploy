generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coupon {
  id                 String         @id
  idInSite           String
  domain             String?
  merchantNameOnSite String
  title              String
  description        String?
  termsAndConditions String?
  expiryDateAt       DateTime?      @db.Date
  code               String?
  startDateAt        DateTime?      @db.Date
  sourceUrl          String
  isShown            Boolean        @default(false)
  isExpired          Boolean?
  isExclusive        Boolean?
  firstSeenAt        DateTime       @default(now())
  lastSeenAt         DateTime       @default(now())
  archivedAt         DateTime?
  archivedReason     ArchiveReason?
  locale             String
  apifyActorId       String
  shouldBeFake       Boolean?
  merchantId         String
  lastCrawledAt      DateTime?
  sourceDomain       String?
  Source             Source         @relation(fields: [apifyActorId], references: [apifyActorId])
  TargetLocale       TargetLocale   @relation(fields: [locale], references: [locale], onDelete: Cascade)
  Merchant           Merchant       @relation(fields: [merchantId], references: [id])
  SourceDomain       SourceDomain?  @relation(fields: [sourceDomain], references: [domain])

  @@index([apifyActorId])
  @@index([archivedAt])
  @@index([code])
  @@index([domain])
  @@index([isExclusive])
  @@index([isExpired])
  @@index([isShown])
  @@index([lastSeenAt])
  @@index([locale])
  @@index([merchantNameOnSite])
  @@index([shouldBeFake])
  @@index([sourceUrl])
}

model CouponStats {
  id              String   @id
  sourceUrl       String
  couponsCount    Int
  surgeThreshold  Int
  plungeThreshold Int
  createdAt       DateTime @default(now())
}

model Merchant {
  id           String       @id
  oberst_id    BigInt
  locale       String       @db.VarChar(255)
  name         String       @db.VarChar(255)
  domain       String       @db.VarChar(255)
  disabledAt   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  Coupon       Coupon[]
  TargetLocale TargetLocale @relation(fields: [locale], references: [locale], onDelete: Cascade)
  TargetPage   TargetPage[]

  @@unique([locale, oberst_id])
  @@index([disabledAt])
  @@index([locale])
  @@index([name])
  @@index([oberst_id])
}

model ProcessedRun {
  id                  String        @id
  actorRunId          String        @unique
  endedAt             DateTime?
  status              String
  archivedCount       Int           @default(0)
  createdCount        Int           @default(0)
  errorCount          Int           @default(0)
  startedAt           DateTime      @default(now())
  processingErrors    Json?
  resultCount         Int           @default(0)
  unarchivedCount     Int           @default(0)
  updatedCount        Int           @default(0)
  costInUsdMicroCents Int           @default(0)
  localeId            String?
  apifyActorId        String?
  payload             Json?
  retriesCount        Int           @default(0)
  Source              Source?       @relation(fields: [apifyActorId], references: [apifyActorId])
  TargetLocale        TargetLocale? @relation(fields: [localeId], references: [id])
}

model Source {
  id           String         @id
  apifyActorId String         @unique
  isActive     Boolean        @default(true)
  name         String
  lastRunAt    DateTime?
  maxStartUrls Int?
  Coupon       Coupon[]
  ProcessedRun ProcessedRun[]
  SourceDomain SourceDomain[]

  @@index([apifyActorId])
  @@index([name])
}

model SourceDomain {
  id               String      @id
  domain           String      @unique
  reliability      Reliability @default(reliable)
  apifyActorId     String
  proxyCountryCode String?
  Coupon           Coupon[]
  Source           Source      @relation(fields: [apifyActorId], references: [apifyActorId])

  @@index([apifyActorId])
  @@index([domain])
  @@index([reliability])
}

model TargetLocale {
  id             String         @id
  locale         String         @unique
  countryCode    String
  languageCode   String
  searchTemplate String
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  lastSerpRunAt  DateTime?
  Coupon         Coupon[]
  Merchant       Merchant[]
  ProcessedRun   ProcessedRun[]
  TargetPage     TargetPage[]

  @@unique([countryCode, languageCode])
  @@index([locale])
}

model TargetPage {
  id                 String       @id
  url                String       @unique
  domain             String
  title              String
  searchTerm         String
  searchPosition     Int
  searchDomain       String
  apifyRunId         String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  localeId           String
  lastApifyRunAt     DateTime?
  disabledAt         DateTime?
  markedAsNonIndexAt DateTime?
  verified_locale    String?
  merchantId         String
  TargetLocale       TargetLocale @relation(fields: [localeId], references: [id])
  Merchant           Merchant     @relation(fields: [merchantId], references: [id])

  @@index([localeId])
  @@index([merchantId])
  @@index([url])
}

model Test {
  id             String   @id
  apifyTestRunId String
  apifyActorId   String   @unique
  status         String
  lastRunAt      DateTime @default(now())
}

enum ArchiveReason {
  expired
  unexpired
  manual
  removed
}

enum Reliability {
  reliable
  unreliable
}
